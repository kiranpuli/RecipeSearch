{"version":3,"sources":["components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","className","src","item","image","alt","source","label","ingredients","map","i","text","App","state","Results","search","handleSearch","bind","handleSubmit","e","this","setState","target","value","preventDefault","console","log","fetch","then","response","json","data","hits","type","onChange","placeholder","onClick","href","key","recipe","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAuBeA,MArBf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,2BACX,yBAAMA,UAAU,mBAAmBC,IAAKF,EAAMG,KAAKC,MAAOC,IAAKL,EAAMG,KAAKG,SAC1E,yBAAKL,UAAU,cACf,wBAAIA,UAAU,yBAAyBD,EAAMG,KAAKI,OAClD,wBAAIN,UAAU,cACd,uBAAGA,UAAU,wBAAb,kBACKD,EAAMG,KAAKK,YAAYC,KAAI,SAASC,GACjC,OACA,wBAAIT,UAAU,sCAAsCS,EAAEC,cC8C/DC,E,YAnDb,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,QAAQ,GACTC,OAAO,IAER,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBAPP,E,0EAUIE,GACjBC,KAAKC,SAAS,CAACN,OAAOI,EAAEG,OAAOC,U,mCAEdJ,GAAG,IAAD,OACjBA,EAAEK,iBACFC,QAAQC,IAAI,WAAWN,KAAKP,MAAME,QAG9BY,MAAM,mCAAD,OAAoCP,KAAKP,MAAME,OAA/C,mBAFQ,WAER,oBADS,qCAEXa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACb,EAAKV,SAAS,CAACP,QAAQiB,EAAKC,OAC5BP,QAAQC,IAAI,EAAKb,MAAMC,c,+BAMtB,OACE,yBAAKb,UAAU,wBACb,yBAAKA,UAAU,iBACf,wBAAIA,UAAU,eAAd,iBACA,0BAAMA,UAAU,WAChB,2BAAOgC,KAAK,OAAOhC,UAAU,6BAA6BiC,SAAUd,KAAKJ,aAAcmB,YAAY,mCACnG,4BAAQC,QAAShB,KAAKF,aAAejB,UAAU,uCAA/C,eAEA,uBAAGA,UAAU,QAAO,uBAAGoC,KAAK,IAAIpC,UAAU,gBAAtB,QAApB,yBAEA,yBAAKA,UAAU,+BAEZmB,KAAKP,MAAMC,QAAQL,KAAI,SAASN,GAC/B,OACE,kBAAC,EAAD,CAAQmC,IAAKnC,EAAKoC,OAAOhC,MAAOJ,KAAMA,EAAKoC,kB,GA3CvCC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.a6001387.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Recipe(props){\r\n    return(\r\n        <div className=\" m-1 p-4\">\r\n            <div className=\" card card-res p-5 zoom\">\r\n                <img  className=\"card-img-top img\" src={props.item.image} alt={props.item.source}></img>\r\n                <div className=\"card-body \">\r\n                <h3 className=\"card-title text-light\">{props.item.label}</h3>\r\n                <ol className=\"list-group\">\r\n                <p className=\"card-text text-light\">Ingredients : </p>\r\n                    {props.item.ingredients.map(function(i){\r\n                        return(\r\n                        <li className=\"list-group-item list-group-item-sm\">{i.text}</li>\r\n                        )\r\n                    })}\r\n                </ol>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe","import React from 'react';\nimport './App.css';\nimport './bootstrapminty.min.css'\nimport Recipe from './components/Recipe.js'\n\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      Results:[],\n\t    search:\"\",\n    }\n    this.handleSearch=this.handleSearch.bind(this);\n    this.handleSubmit=this.handleSubmit.bind(this);\n    \n  }\n      handleSearch(e){\n\t\tthis.setState({search:e.target.value});\n      }\n      handleSubmit(e){\n\t\t  e.preventDefault();\n\t\t  console.log(\"Query : \"+this.state.search);\n        const APP_ID='ee652662';\n        const APP_KEY='8f3d0a7d6f37abfece70919ac2ea75a9';\n        fetch(`https://api.edamam.com/search?q=${this.state.search}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n          .then(response => response.json())\n          .then(data => {\n\t\t\tthis.setState({Results:data.hits});\n\t\t\tconsole.log(this.state.Results)\n          });\n        \n      }\n  render(){\n    \n    return (\n      <div className=\"container-fliud main\">\n        <div className=\"jumbotron m-0\">\n        <h1 className=\"page-header\">Recipe Search</h1>\n        <form className=\"row p-3\">\n        <input type=\"text\" className=\"form-control col-sm-7 mr-1\" onChange={this.handleSearch} placeholder=\"Search for your favourite food\"></input>\n        <button onClick={this.handleSubmit}  className=\"btn btn-danger btn-sm col-sm-3 ml-1\">Get Recipe</button>\n        </form>\n        <p className=\"lead\"><a href=\"#\" className=\"btn btn-info\">CODE</a> available on github</p>\n        </div>\n        <div className=\"container-fluid results p-3\">\n          \n          {this.state.Results.map(function(item){\n            return(\n              <Recipe key={item.recipe.label} item={item.recipe}/>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}